package reports

import com.sbnz.bankcredit.dto.CreditTypeNumberDTO;
import com.sbnz.bankcredit.dto.CreditCountDTO;
import com.sbnz.bankcredit.dto.ContractList;
import com.sbnz.bankcredit.dto.ClientDTO;
import com.sbnz.bankcredit.dto.ActiveClientsDTO;
import com.sbnz.bankcredit.model.Contract;
import com.sbnz.bankcredit.model.Client;
import com.sbnz.bankcredit.model.CreditType;
import java.util.List;
import java.util.ArrayList;


rule "broj kredita grupisani po tipovima"
	when
		not(CreditCountDTO())
		$allContracts : List() from collect(Contract(signed == true))
		$hCount : Number(intValue >= 0) from accumulate (
			$c : Contract(creditRequest.creditType == CreditType.Housing) from $allContracts,
				count($c)
			)
		$iCount : Number(intValue >= 0) from accumulate (
			$c1 : Contract(creditRequest.creditType == CreditType.Investment) from $allContracts,
				count($c1)
			)
		$cCount : Number(intValue >= 0) from accumulate (
			$c2 : Contract(creditRequest.creditType == CreditType.Consumer) from $allContracts,
				count($c2)
			)
	then
		System.out.println("Rule ");
		CreditTypeNumberDTO housing = new CreditTypeNumberDTO($hCount.intValue(), CreditType.Housing);
		CreditTypeNumberDTO investment = new CreditTypeNumberDTO($iCount.intValue(), CreditType.Investment);
		CreditTypeNumberDTO consumer = new CreditTypeNumberDTO($cCount.intValue(), CreditType.Consumer);
		List<CreditTypeNumberDTO> crList = new ArrayList<CreditTypeNumberDTO>();
		crList.add(housing);
		crList.add(investment);
		crList.add(consumer);
		insert(new CreditCountDTO(crList));
		System.out.println("Count " + housing.getCount());
	end

rule "Najveci aktivni kredit"
	when
		not (ContractList(max == true))
		$activeContracts : List() from collect(Contract(signed == true, active == true))
		$maxSum : Number(doubleValue >= 0) from accumulate (
			$c : Contract($sumOfMoney : creditRequest.sumOfMoney) from $activeContracts,
			max($sumOfMoney)
		)
		$maxContracts : List() from collect(Contract(signed == true, active == true, creditRequest.sumOfMoney == $maxSum.doubleValue()))
	then
		System.out.println("max sum " + $maxSum);
		insert (new ContractList($maxContracts, true));
	end

rule "Najmanji aktivni kredit"
	when
		not (ContractList(max == false))
		$activeContracts : List() from collect(Contract(signed == true, active == true))
		$minSum : Number(doubleValue > 0) from accumulate (
			$c : Contract($sumOfMoney : creditRequest.sumOfMoney) from $activeContracts,
			min($sumOfMoney)
		)
		$minContracts : List() from collect(Contract(signed == true, active == true, creditRequest.sumOfMoney == $minSum.doubleValue()))
	then
		insert (new ContractList($minContracts, false));
	end

rule "najaktivniji klijenti - 15+ bodova i 2 kredita u zadnjih 5 godina"
	when
		$activeClients : ActiveClientsDTO()
		$client : Client (rewardPoints >= 15, $jmbg : jmbg)
		$creditCount : Number(intValue >= 2) from accumulate( 
			$contract : Contract(client == $client, System.currentTimeMillis() - signingDate.getTime() <= (long) 1000*60*60*24*365*5),
			count($contract)
		)
		$added : Number(intValue == 0) from accumulate (
			$addedClient : Client(jmbg == $jmbg) from $activeClients.getClients(),
			count ($addedClient)
		 )
	then
		System.out.println("Pravilo izvrseno ");
		modify($activeClients) {getClients().add($client);}
		
	end

rule "najaktivniji klijenti - u 4 godine suma veca ili jednaka 50 000 evra i racun otvoren 5 ili vise godina"
	when
		$activeClients : ActiveClientsDTO()
		$client : Client (System.currentTimeMillis() - accountOpeningDate.getTime() >= 1000*60*60*24*365*5, $jmbg : jmbg)
		$creditSum : Number(doubleValue >= 50000) from accumulate( 
			$contract : Contract(client == $client, System.currentTimeMillis() - signingDate.getTime() <= (long) 1000*60*60*24*365*4, $sumOfMoney : creditRequest.sumOfMoney),
			sum($sumOfMoney)
		)
		$added : Number(intValue == 0) from accumulate (
			$addedClient : Client(jmbg == $jmbg) from $activeClients.getClients(),
			count ($addedClient)
		 )
	then
		modify($activeClients) {getClients().add($client);}
	end